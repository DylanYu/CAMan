<?xml version="1.0" encoding="UTF-8"?>
<DecModel:Decoration xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:DecModel="http://www.sei.pku.edu.cn/rsa/decmodel" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore">
  <genModel href="OSModel.genmodel#/"/>
  <importClass>
    <fullClassName>import java.util.*;</fullClassName>
    <fullClassName>import org.openstack4j.api.Builders;</fullClassName>
    <fullClassName>import org.openstack4j.api.OSClient;</fullClassName>
    <fullClassName>import org.openstack4j.model.image.Image;</fullClassName>
    <fullClassName>import org.openstack4j.openstack.OSFactory;</fullClassName>
    <fullClassName>import org.openstack4j.model.compute.ActionResponse;</fullClassName>
    <fullClassName>import org.openstack4j.model.compute.actions.*;</fullClassName>
    <fullClassName>import org.openstack4j.model.compute.*;</fullClassName>
    <fullClassName>import org.openstack4j.model.image.*;</fullClassName>
    <fullClassName>import os.*;</fullClassName>
    <fullClassName>import web.*;</fullClassName>
    <fullClassName>import util.*</fullClassName>
    <fullClassName>import org.apache.commons.configuration.*;</fullClassName>
  </importClass>
  <codeArea/>
  <mapArea>
    <globalMap/>
    <classMap specType="LinkedList&lt;String>">
      <specCode xsi:type="DecModel:Create" description=" ">
        <code xsi:type="DecModel:CodeFragment" description="" text="core = new LinkedList&lt;String>();&#xD;&#xA;System.out.println(&quot;Create cluster completed&quot;);&#xD;&#xA;return core;"/>
      </specCode>
      <classRef href="OSModel.ecore#//ClusterWrap"/>
      <featureMap specType="">
        <specCode xsi:type="DecModel:Get" description=" ">
          <code xsi:type="DecModel:CodeFragment" description=" " text="//System.out.println(&quot;Get cluster name&quot;);"/>
        </specCode>
        <specCode xsi:type="DecModel:Set" description=" ">
          <code xsi:type="DecModel:CodeFragment" description=" " text="System.out.println(&quot;Set cluster name&quot;);&#xD;&#xA;final $spec_type ctrl=$core;&#xD;&#xA;if (ctrl.size() == 0) ctrl.add(name);&#xD;&#xA;else ctrl.set(0, name);"/>
        </specCode>
        <feature xsi:type="ecore:EAttribute" href="OSModel.ecore#//ServerWrap/name"/>
      </featureMap>
    </classMap>
    <classMap specType="Server">
      <specCode xsi:type="DecModel:Create" description="">
        <code xsi:type="DecModel:CodeFragment" description="" text="System.out.println(&quot;Creating server...&quot;);&#xD;&#xA;&#xD;&#xA;List&lt;String> nets = new LinkedList&lt;String>();&#xD;&#xA;        nets.add(&quot;2b2e0dfe-2d38-49c2-ad11-338618503f63&quot;);&#xD;&#xA;        Flavor flavor = OS.getClient().compute().flavors().get(&quot;2&quot;);&#xD;&#xA;        Image image = OS.getClient().images().get(&quot;7c28d5a1-551e-4416-879e-d1e61b4c62f9&quot;);&#xD;&#xA;        Server server = OS.getClient().compute().servers().boot(Builders.server()&#xD;&#xA;                .name(name)&#xD;&#xA;                .flavor(flavor.getId())&#xD;&#xA;                .image(image.getId())&#xD;&#xA;                .networks(nets)&#xD;&#xA;                .build());&#xD;&#xA;&#xD;&#xA;// Assign floating IP&#xD;&#xA;&#x9;System.out.println(&quot;Assign floating IP...&quot;);&#xD;&#xA;        try { // MUST wait for Nova, otherwise may fail in assigning floating IP &#xD;&#xA;            Thread.sleep(1000);&#xD;&#xA;        } catch (InterruptedException e) {&#xD;&#xA;            e.printStackTrace();&#xD;&#xA;        }&#xD;&#xA;        boolean hasAvailableFloatingIP = false;&#xD;&#xA;        List&lt;? extends FloatingIP> floatingIPs = OS.getClient().compute().floatingIps().list();&#xD;&#xA;        for (FloatingIP ip : floatingIPs) {&#xD;&#xA;            if (ip.getFixedIpAddress() == null) {&#xD;&#xA;                hasAvailableFloatingIP = true;&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        if (!hasAvailableFloatingIP) {&#xD;&#xA;            String poolName = OS.getClient().compute().floatingIps().getPoolNames().get(0);&#xD;&#xA;            System.out.println(String.format(&quot;Allocate floating IP in pool %s&quot;, poolName));&#xD;&#xA;            OS.getClient().compute().floatingIps().allocateIP(poolName);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        List&lt;? extends FloatingIP> allFloatingIPs = OS.getClient().compute().floatingIps().list();&#xD;&#xA;        List&lt;FloatingIP> availableFloatingIPs = new LinkedList&lt;FloatingIP>();&#xD;&#xA;        for (FloatingIP ip : allFloatingIPs) {&#xD;&#xA;            if (ip.getFixedIpAddress() == null)&#xD;&#xA;                availableFloatingIPs.add(ip);&#xD;&#xA;        }&#xD;&#xA;        if (availableFloatingIPs.size() == 0) {&#xD;&#xA;            System.out.println(&quot;error: no available floating ip&quot;);&#xD;&#xA;            return server;&#xD;&#xA;        }&#xD;&#xA;        FloatingIP ip = availableFloatingIPs.get(0);&#xD;&#xA;        ActionResponse r = OS.getClient().compute().floatingIps().addFloatingIP(&#xD;&#xA;                server, &#xD;&#xA;                ip.getFloatingIpAddress()); //&#xD;&#xA;        System.out.println(&#xD;&#xA;                String.format(&quot;associate floating IP %s success? %b, fault msg: %s&quot;, &#xD;&#xA;                        ip.getFloatingIpAddress(), &#xD;&#xA;                        r.isSuccess(),&#xD;&#xA;                        r.getFault()));&#xD;&#xA;        String id = server.getId();&#xD;&#xA;        server = OS.getClient().compute().servers().get(id); // MUST update model&#xD;&#xA;        List&lt;? extends Address> addresses = server.getAddresses().getAddresses(&quot;private&quot;);&#xD;&#xA;&#xD;&#xA;&#x9;serverId = server.getId();&#xD;&#xA;&#x9;//name = name;&#xD;&#xA;&#x9;core  = server; // necessary&#xD;&#xA;System.out.println(&quot;Create server completed!&quot;);&#xD;&#xA;&#x9;return core;"/>
      </specCode>
      <specCode xsi:type="DecModel:Destroy">
        <code xsi:type="DecModel:CodeFragment" text="System.out.println(&quot;Deleting server [&quot; + name + &quot;] ...&quot;);&#xD;&#xA;ActionResponse rs = OS.getClient().compute().servers().delete(serverId);&#xD;&#xA;        if (rs.isSuccess()) System.out.println(&quot;Delete server completed!&quot;);&#xD;&#xA;        else System.out.println(&quot;Delete server FAILED: &quot; + rs.toString());"/>
      </specCode>
      <classRef href="OSModel.ecore#//ServerWrap"/>
      <featureMap specType="">
        <specCode xsi:type="DecModel:Set">
          <code xsi:type="DecModel:CodeFragment" description="" text="System.out.println(&quot;Setting server name...&quot;);&#xD;&#xA;Server server = OS.getClient().compute().servers().update(&#xD;&#xA;                serverId, ServerUpdateOptions.create().name(newName));&#xD;&#xA;        if (server.getName().equals(newName)) System.out.println(&quot;Set server name completed!&quot;);&#xD;&#xA;        else System.out.println(&quot;Set server name FAILED&quot;);"/>
        </specCode>
        <specCode xsi:type="DecModel:Get">
          <code xsi:type="DecModel:CodeFragment" description="" text="System.out.println(&quot;Get server name&quot;);"/>
        </specCode>
        <feature xsi:type="ecore:EAttribute" href="OSModel.ecore#//ServerWrap/name"/>
      </featureMap>
    </classMap>
    <classMap specType="Web">
      <specCode xsi:type="DecModel:Create" description="">
        <code xsi:type="DecModel:CodeFragment" description="" text="System.out.println(&quot;just created a web service&quot;);&#xD;&#xA;Web web = new Web(name, status);&#xD;&#xA;core = web;&#xD;&#xA;return core;"/>
      </specCode>
      <classRef href="OSModel.ecore#//WebWrap"/>
      <featureMap xsi:type="DecModel:FeatureMapForAbstractClass" specType="">
        <specCode xsi:type="DecModel:Set">
          <code xsi:type="DecModel:CodeFragment" text="        Configuration hostConfig = null;&#xD;&#xA;        try {&#xD;&#xA;            hostConfig = new PropertiesConfiguration(&quot;config/host.properties&quot;);&#xD;&#xA;        } catch (ConfigurationException e2) {&#xD;&#xA;            e2.printStackTrace();&#xD;&#xA;        }&#xD;&#xA;OSClient os = OS.getClient();&#xD;&#xA;if (newHostOn == null || (oldHostOn != null &amp;&amp; newHostOn != oldHostOn)) {&#xD;&#xA;&#x9;System.out.println(&quot;Removing software...&quot;);&#xD;&#xA;&#x9;Server oldServer = OS.getClient().compute().servers().get(oldHostOn.getServerId()); &#xD;&#xA;&#x9;List&lt;? extends Address> oldAddresses = oldServer.getAddresses().getAddresses(&quot;private&quot;);&#xD;&#xA;&#x9; Address oldServerAddress = null;&#xD;&#xA;        for (Address address : oldAddresses) {&#xD;&#xA;            // Equals, not ==&#xD;&#xA;            if (address.getType().equals(&quot;floating&quot;)) {// skip fixed address&#xD;&#xA;                oldServerAddress  = address;&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        String command = &quot;apt-get -y remove apache2&quot;;&#xD;&#xA;        //System.out.println(&quot;command: &quot; + command);&#xD;&#xA;        RemoteExecute.jumpSudoExecute(&#xD;&#xA;                command,&#xD;&#xA;                hostConfig.getString(&quot;oshost.ip&quot;), &#xD;&#xA;                hostConfig.getString(&quot;oshost.user&quot;), &#xD;&#xA;                hostConfig.getString(&quot;oshost.pw&quot;), &#xD;&#xA;                oldServerAddress.getAddr(),&#xD;&#xA;                hostConfig.getString(&quot;vm.ubuntu-desktop.user&quot;), &#xD;&#xA;                hostConfig.getString(&quot;vm.ubuntu-desktop.pw&quot;));&#xD;&#xA;        System.out.println(&quot;Remove finished&quot;);&#xD;&#xA;&#x9;status = -1;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (newHostOn == null) return;&#xD;&#xA;&#xD;&#xA;//if (newHostOn == null) return;&#xD;&#xA;&#xD;&#xA;System.out.println(&quot;Trying to deploy software...&quot;);&#xD;&#xA;&#x9;&#x9;Server server = OS.getClient().compute().servers().get(newHostOn.getServerId()); &#xD;&#xA;        &#xD;&#xA;&#xD;&#xA;        &#xD;&#xA;        //final Server server = servers[0]; // TODO understand&#xD;&#xA;        // scp necessary files&#xD;&#xA;        while (os.compute().servers().get(server.getId()).getStatus() != Server.Status.ACTIVE) {&#xD;&#xA;            System.out.println(String.format(&quot;wait for server %s booting&quot;, server.getName()));&#xD;&#xA;            try {&#xD;&#xA;                Thread.sleep(2000);&#xD;&#xA;            } catch (InterruptedException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        System.out.println(String.format(&quot;server %s is ready&quot;, server.getName()));&#xD;&#xA;        // find address for the server&#xD;&#xA;        Address serverAddress = null;&#xD;&#xA;        List&lt;? extends Address> addresses = server.getAddresses().getAddresses(&quot;private&quot;);&#xD;&#xA;        for (Address address : addresses) {&#xD;&#xA;            // Equals, not ==&#xD;&#xA;            if (address.getType().equals(&quot;floating&quot;)) {// skip fixed address&#xD;&#xA;                serverAddress = address;&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        // test whether server is reachable&#xD;&#xA;        boolean reachable = Network.remotePingTest(&#xD;&#xA;                hostConfig.getString(&quot;oshost.ip&quot;), &#xD;&#xA;                hostConfig.getString(&quot;oshost.user&quot;), &#xD;&#xA;                hostConfig.getString(&quot;oshost.pw&quot;), &#xD;&#xA;                serverAddress.getAddr());&#xD;&#xA;//        System.out.println(&quot;ping test passed? &quot; + reachable);&#xD;&#xA;        &#xD;&#xA;        System.out.println(&quot;Transfering necessary files to server...&quot;);&#xD;&#xA;        try {&#xD;&#xA;            ScpFile.scp(hostConfig.getString(&quot;oshost.ip&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;oshost.user&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;oshost.pw&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;oshost.chef_client.path&quot;), &#xD;&#xA;                    serverAddress.getAddr(), &#xD;&#xA;                    hostConfig.getString(&quot;vm.ubuntu-desktop.user&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;vm.ubuntu-desktop.pw&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;dst.chef_client.path&quot;));&#xD;&#xA;        } catch (Exception e1) {&#xD;&#xA;            e1.printStackTrace();&#xD;&#xA;        }&#xD;&#xA;        System.out.println(&quot;Transfer completed&quot;);&#xD;&#xA;        &#xD;&#xA;        System.out.println(&quot;Installing Chef-client...&quot;);&#xD;&#xA;        String command = String.format(&quot;dpkg -i %s/%s&quot;, &#xD;&#xA;                hostConfig.getString(&quot;dst.chef_client.path&quot;), &#xD;&#xA;                hostConfig.getString(&quot;file.chef_client.name&quot;));&#xD;&#xA;        RemoteExecute.jumpSudoExecute(&#xD;&#xA;                command,&#xD;&#xA;                hostConfig.getString(&quot;oshost.ip&quot;), &#xD;&#xA;                hostConfig.getString(&quot;oshost.user&quot;), &#xD;&#xA;                hostConfig.getString(&quot;oshost.pw&quot;), &#xD;&#xA;                serverAddress.getAddr(), &#xD;&#xA;                hostConfig.getString(&quot;vm.ubuntu-desktop.user&quot;), &#xD;&#xA;                hostConfig.getString(&quot;vm.ubuntu-desktop.pw&quot;));&#xD;&#xA;        System.out.println(&quot;Installation completed&quot;);&#xD;&#xA;        &#xD;&#xA;        // delay execute install package &amp; detach floating IP&#xD;&#xA;        System.out.println(&quot;Create cookbook directory...&quot;);&#xD;&#xA;        command = &quot;mkdir /home/nju/cookbooks&quot;;&#xD;&#xA;        RemoteExecute.jumpExecute(&#xD;&#xA;                command,&#xD;&#xA;                hostConfig.getString(&quot;oshost.ip&quot;), &#xD;&#xA;                hostConfig.getString(&quot;oshost.user&quot;), &#xD;&#xA;                hostConfig.getString(&quot;oshost.pw&quot;), &#xD;&#xA;                serverAddress.getAddr(), &#xD;&#xA;                hostConfig.getString(&quot;vm.ubuntu-desktop.user&quot;), &#xD;&#xA;                hostConfig.getString(&quot;vm.ubuntu-desktop.pw&quot;));&#xD;&#xA;        System.out.println(&quot;Directory created&quot;);&#xD;&#xA;        &#xD;&#xA;        System.out.println(&quot;Transfering cookbooks to server...&quot;);&#xD;&#xA;        try {&#xD;&#xA;            ScpFile.scp(hostConfig.getString(&quot;oshost.ip&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;oshost.user&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;oshost.pw&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;oshost.cookbook.apache2.path&quot;), &#xD;&#xA;                    serverAddress.getAddr(), &#xD;&#xA;                    hostConfig.getString(&quot;vm.ubuntu-desktop.user&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;vm.ubuntu-desktop.pw&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;vm.cookbook.path&quot;));&#xD;&#xA;        } catch (Exception e1) {&#xD;&#xA;            // TODO Auto-generated catch block&#xD;&#xA;            e1.printStackTrace();&#xD;&#xA;        }&#xD;&#xA;        System.out.println(&quot;Transfer completed&quot;);&#xD;&#xA;        &#xD;&#xA;        //modifyApt(serverAddress.getAddr());&#xD;&#xA;        System.out.println(&quot;Updating repository...&quot;);&#xD;&#xA;        try {&#xD;&#xA;            ScpFile.scp(hostConfig.getString(&quot;oshost.ip&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;oshost.user&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;oshost.pw&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;oshost.sources_list.path&quot;), &#xD;&#xA;                    serverAddress.getAddr(), &#xD;&#xA;                    hostConfig.getString(&quot;vm.ubuntu-desktop.user&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;vm.ubuntu-desktop.pw&quot;), &#xD;&#xA;                    &quot;/home/nju&quot;);&#xD;&#xA;            &#xD;&#xA;            //System.out.println(&quot;mv file&quot;);&#xD;&#xA;            command = String.format(&quot;mv %s %s&quot;, &#xD;&#xA;                    &quot;/home/nju/sources.list&quot;, &#xD;&#xA;                    hostConfig.getString(&quot;vm.sources_list.dir&quot;));&#xD;&#xA;            //System.out.println(&quot;command: &quot; + command);&#xD;&#xA;            RemoteExecute.jumpSudoExecute(&#xD;&#xA;                    command,&#xD;&#xA;                    hostConfig.getString(&quot;oshost.ip&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;oshost.user&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;oshost.pw&quot;), &#xD;&#xA;                    serverAddress.getAddr(), &#xD;&#xA;                    hostConfig.getString(&quot;vm.ubuntu-desktop.user&quot;), &#xD;&#xA;                    hostConfig.getString(&quot;vm.ubuntu-desktop.pw&quot;));&#xD;&#xA;                    &#xD;&#xA;        } catch (Exception e1) {&#xD;&#xA;            e1.printStackTrace();&#xD;&#xA;        }&#xD;&#xA;        System.out.println(&quot;Update completed&quot;);&#xD;&#xA;        &#xD;&#xA;        System.out.println(&quot;Applying cookbooks...&quot;);&#xD;&#xA;        command = &quot;chef-client --local-mode --runlist 'recipe[learn_chef_apache2]'&quot;;&#xD;&#xA;        RemoteExecute.jumpSudoExecuteDelay(&#xD;&#xA;                command,&#xD;&#xA;                5, // wait for 10 seconds TODO delete&#xD;&#xA;                hostConfig.getString(&quot;oshost.ip&quot;), &#xD;&#xA;                hostConfig.getString(&quot;oshost.user&quot;), &#xD;&#xA;                hostConfig.getString(&quot;oshost.pw&quot;), &#xD;&#xA;                serverAddress.getAddr(), &#xD;&#xA;                hostConfig.getString(&quot;vm.ubuntu-desktop.user&quot;), &#xD;&#xA;                hostConfig.getString(&quot;vm.ubuntu-desktop.pw&quot;));&#xD;&#xA;        System.out.println(&quot;Cookbooks applied&quot;);&#xD;&#xA;&#x9;status = 0;&#xD;&#xA;"/>
        </specCode>
        <feature xsi:type="ecore:EReference" href="OSModel.ecore#//WebWrap/hostOn"/>
      </featureMap>
    </classMap>
  </mapArea>
</DecModel:Decoration>
